library(GPA)
library(GPA)
GPA<-function(arraydata,method=c("mean","norm"),maxit=10,mindist=1/100,n=NULL,verbose=TRUE)
{
if(!is.array(arraydata))
{
print("Insert an array of matrix.")
}else if(method=="mean" && (is.null(n) || is.numeric(n)) && (maxit>0 && is.numeric(maxit))&& (mindist>0 && is.numeric(mindist)))
{
n<-NULL
GPAmean(arraydata,mindist,maxit,verbose=verbose)
} else if(method=="norm" && (!is.null(n) && n>0 && n<=(dim(arraydata)[3])) && (maxit>0 && is.numeric(maxit))) {
mindist<-NULL
GPAnorm(arraydata,n,maxit=10)
} else if(method=="norm" && (is.null(n)|| n<=0  || !is.numeric(n)||n>=(dim(arraydata)[3]))){
warning("Insert an acceptable n value for method norm.")
}
else c("Invalid mathod")
}
library(GPA)
library(GPA)
library(GPA)
library(GPA)
library(GPA)
library(GPA)
library(GPA)
library(GPA)
library(GPA)
library(GPA)
GPAmean <- function(arraydata,mindist,maxit,verbose=TRUE){
cont <- 1
dist2<- Inf
distanze<-0 #creo una variabile che mi tiene le misure delle distanze
mean_new<-compute_mean(arraydata)
distanzainiz<-sum(plyr::aaply(arraydata,3,function(x)norm(x-mean_new,type="F")))
if(verbose) cat("\n distanza iniziale:",distanzainiz[cont],"\n")
while(dist2>mindist && cont<=maxit)
{
cont=cont+1
mean_start<-mean_new
rm(mean_new)
tabruotate<-plyr::aaply(arraydata,3, function(A)procustemean(A,mean_start))
tabruotate=aperm(tabruotate,c(2,3,1))
#str(tabruotate)
distanzainiz[cont]<-sum(plyr::aaply(tabruotate,3,function(x)norm(x-mean_start,type="F")))
#distanzainiz[cont]
#str(tabruotate)
mean_new <- compute_mean(tabruotate)
#str(mean_start2)
#mean_start2=as.matrix(mean_start2)
#str(mean_start2)
#calcolo la nuova distanza con la norma di Frobenius
# dist2=norm(mean_new-mean_start,type="F")
# distanze[cont]<-dist2
dist2=(distanzainiz[cont-1]-distanzainiz[cont])/distanzainiz[cont]
if(verbose) cat("\n fine ciclo di iterazione numero:",cont-1,"\n nuova distanza:",distanzainiz[cont],"\n")
#rm(dist2)
gc()
}
distanzainiz=distanzainiz[-1]
list(Aarray=tabruotate,mean=mean_start,distance=distanzainiz)
}
procustemean<-function(A,B)
{
n<-min(dim(A)[1:2])-1
dati2<-A #inizializzo i dati
gam<-t(B)%*%dati2
sv<-irlba::irlba(gam,nv = n,nu=n) #eseguo svd (meglio di svd)
# sv<-svd(gam)
# rm(gam)
u=as.matrix(sv$u)
v=t(as.matrix(sv$v))
R<-u%*%v #calcolo la matrice R
#str(R)
rm(sv)
tabruotate<-as.matrix(dati2%*%t(R)) #calcolo le nuove matrici ruotate
rm(gam,R)
#distprova[i]<-norm(out-xhat,type="F")^2
rm(dati2)
#str(distprova)
# str(tabruotate)
gc()
return(tabruotate)
}
GPA<-function(arraydata,method=c("mean","norm"),maxit=10,mindist=1/100,n=NULL,verbose=TRUE)
{
if(!is.array(arraydata))
{
warning("Insert an array of matrix.")
}else if(method=="mean" && (is.null(n) || is.numeric(n)) && (maxit>0 && is.numeric(maxit))&& (mindist>0 && is.numeric(mindist)))
{
n<-NULL
GPAmean(arraydata,mindist,maxit,verbose=verbose)
} else if(method=="norm" && (!is.null(n) && n>0 && n<=(dim(arraydata)[3])) && (maxit>0 && is.numeric(maxit))) {
mindist<-NULL
GPAnorm(arraydata,n,maxit=10,verbose=verbose)
} else if(method=="norm" && (is.null(n)|| n<=0  || !is.numeric(n)||n>=(dim(arraydata)[3]))){
warning("Insert an acceptable n value for method norm.")
}
else warning("Invalid mathod")
}
setwd("C:/Users/Lisa/Desktop")
load("TabCentrate.rdata")
dati<-tabcentrate
prova<-GPA(dati)
compute_mean <- function(arraydata)
{
somma<-arraydata[,,1]
for(i in 2:dim(arraydata)[3])
{
somma<-somma+arraydata[,,i]
}
array_mean<-somma/dim(arraydata)[3]
return(array_mean)
}
prova<-GPA(dati)
procustenorm<-function(A,B)
{
n<-min(dim(A)[1:2])-1
dati2<-A #inizializzo i dati
gam<-t(B)%*%dati2
sv<-rARPACK::svds(gam,n) #eseguo svd (meglio di svd)
# sv<-svd(gam)
# rm(gam)
u=as.matrix(sv$u)
v=t(as.matrix(sv$v))
R<-u%*%v #calcolo la matrice R
#str(R)
rm(sv)
beta<-compute_beta(R,gam,dati2)
tabruotate<-as.matrix(beta*dati2%*%t(R)) #calcolo le nuove matrici ruotate
rm(gam,R,beta)
#distprova[i]<-norm(out-xhat,type="F")^2
rm(dati2)
#str(distprova)
#str(tabruotate)
# rm(beta)
gc()
return(list(A=tabruotate))
}
GPAnorm<-function(arraydata,n,maxit,verbose=TRUE){
cont <- 1
distanze<-0 #creo una variabile che mi tiene le misure delle distanze
matrice<-arraydata[,,n]
mean_new<- compute_norm(matrice)
mean_start_0<-mean_new
distanzainiz<-sum(plyr::aaply(arraydata,3,function(x)norm(x-mean_new,type="F")^2))
if(verbose) cat("\n distanza iniziale:",distanzainiz[cont],"\n")
while(cont<=maxit)
{
cont=cont+1
mean_start<-mean_new
rm(mean_new)
tabruotate<-plyr::aaply(arraydata,3, function(A)procustenorm(A,mean_start)$A)
tabruotate=aperm(tabruotate,c(2,3,1))
distanzainiz[cont]<-sum(plyr::aaply(tabruotate,3,function(x)norm(x-mean_start,type="F")^2))
#str(tabruotate)
#distanzainiz[cont]
#str(tabruotate)
mean_new <- compute_mean(tabruotate)
#str(mean_start2)
#mean_start2=as.matrix(mean_start2)
#str(mean_start2)
#Calcolo gamma di mean_start2
mean_start_new<-procustenorm(mean_new,mean_start_0)$A
#calcolo la nuova distanza con la norma di Frobenius
#dist2=norm(mean_start_new-mean_start_0,type="F")^2
#distanze[cont]<-dist2
if(verbose) cat("\n fine ciclo di iterazione numero:",cont-1,"\n nuova distanza:",distanzainiz[cont],"\n")
mean_new=compute_norm(mean_start_new)
rm(mean_start_new)
#rm(dist2)
gc()
}
distanzainiz<-distanzainiz[-1]
list(Aarray=tabruotate,mean=mean_start,distance=distanzainiz)
}
compute_beta<-function(R,gam,dati)
{
numerator<-crossprod(as.vector(R),as.vector(gam))
denominator<-norm(dati,type="F")^2
beta<-numerator/denominator
beta<-as.numeric(beta)
}
compute_norm <- function(arraydata){
datanorm=arraydata/norm(arraydata,type="F")
return(datanorm)
}
rm(list = ls())
load("TabCentrate.rdata")
dati<-tabcentrate
prova<-GPA(dati,method="norm",n=1)
GPA<-function(arraydata,method=c("mean","norm"),maxit=10,mindist=1/100,n=NULL,verbose=TRUE)
{
if(!is.array(arraydata))
{
warning("Insert an array of matrix.")
}else if(method=="mean" && (is.null(n) || is.numeric(n)) && (maxit>0 && is.numeric(maxit))&& (mindist>0 && is.numeric(mindist)))
{
n<-NULL
GPAmean(arraydata,mindist,maxit,verbose=verbose)
} else if(method=="norm" && (!is.null(n) && n>0 && n<=(dim(arraydata)[3])) && (maxit>0 && is.numeric(maxit))) {
mindist<-NULL
GPAnorm(arraydata,n,maxit=10,verbose=verbose)
} else if(method=="norm" && (is.null(n)|| n<=0  || !is.numeric(n)||n>=(dim(arraydata)[3]))){
warning("Insert an acceptable n value for method norm.")
}
else warning("Invalid mathod")
}
procustenorm<-function(A,B)
{
n<-min(dim(A)[1:2])-1
dati2<-A #inizializzo i dati
gam<-t(B)%*%dati2
sv<-rARPACK::svds(gam,n) #eseguo svd (meglio di svd)
# sv<-svd(gam)
# rm(gam)
u=as.matrix(sv$u)
v=t(as.matrix(sv$v))
R<-u%*%v #calcolo la matrice R
#str(R)
rm(sv)
beta<-compute_beta(R,gam,dati2)
tabruotate<-as.matrix(beta*dati2%*%t(R)) #calcolo le nuove matrici ruotate
rm(gam,R,beta)
#distprova[i]<-norm(out-xhat,type="F")^2
rm(dati2)
#str(distprova)
#str(tabruotate)
# rm(beta)
gc()
return(list(A=tabruotate))
}
GPAnorm<-function(arraydata,n,maxit,verbose=TRUE){
cont <- 1
distanze<-0 #creo una variabile che mi tiene le misure delle distanze
matrice<-arraydata[,,n]
mean_new<- compute_norm(matrice)
mean_start_0<-mean_new
distanzainiz<-sum(plyr::aaply(arraydata,3,function(x)norm(x-mean_new,type="F")^2))
if(verbose) cat("\n distanza iniziale:",distanzainiz[cont],"\n")
while(cont<=maxit)
{
cont=cont+1
mean_start<-mean_new
rm(mean_new)
tabruotate<-plyr::aaply(arraydata,3, function(A)procustenorm(A,mean_start)$A)
tabruotate=aperm(tabruotate,c(2,3,1))
distanzainiz[cont]<-sum(plyr::aaply(tabruotate,3,function(x)norm(x-mean_start,type="F")^2))
#str(tabruotate)
#distanzainiz[cont]
#str(tabruotate)
mean_new <- compute_mean(tabruotate)
#str(mean_start2)
#mean_start2=as.matrix(mean_start2)
#str(mean_start2)
#Calcolo gamma di mean_start2
mean_start_new<-procustenorm(mean_new,mean_start_0)$A
#calcolo la nuova distanza con la norma di Frobenius
#dist2=norm(mean_start_new-mean_start_0,type="F")^2
#distanze[cont]<-dist2
if(verbose) cat("\n fine ciclo di iterazione numero:",cont-1,"\n nuova distanza:",distanzainiz[cont],"\n")
mean_new=compute_norm(mean_start_new)
rm(mean_start_new)
#rm(dist2)
gc()
}
distanzainiz<-distanzainiz[-1]
list(Aarray=tabruotate,mean=mean_start,distance=distanzainiz)
}
compute_beta<-function(R,gam,dati)
{
numerator<-crossprod(as.vector(R),as.vector(gam))
denominator<-norm(dati,type="F")^2
beta<-numerator/denominator
beta<-as.numeric(beta)
}
compute_norm <- function(arraydata){
datanorm=arraydata/norm(arraydata,type="F")
return(datanorm)
}
compute_mean <- function(arraydata)
{
somma<-arraydata[,,1]
for(i in 2:dim(arraydata)[3])
{
somma<-somma+arraydata[,,i]
}
array_mean<-somma/dim(arraydata)[3]
return(array_mean)
}
compute_norm <- function(arraydata){
datanorm=arraydata/norm(arraydata,type="F")
return(datanorm)
}
prova<-GPA(dati,method="norm",n=1)
distanze<-prova$distance
plot(distanze,type = "l")
tabruotate<-prova$Aarray
str(tabruotate)
tabmedia<-prova$mean
str(tabmedia)
setwd("E:/Stage/risultatitabcentrate")
write(distanze,file="distanze_gpa_norm_tabcentrate.txt",ncolumns = 1)
save(tabruotate,file="Tab_ruot_gpa_norm_tabcentrate.rdata")
save(tabmedia,file="medie_gpa_norm_tabcentrate.rdata")
datimedia<-as.vector(tabmedia)
plot(datimedia,col=2)
plot(tabmedia,col=2)
points(tabruotate[,,1],col=3)
points(tabruotate[,,2],col=3)
plot(tabmedia,col=2)
points(tabruotate[,,2],col=3)
plot(tabmedia,col=2)
points(tabruotate[,,3],col=3)
plot(tabmedia,col=2)
points(tabruotate[,,4],col=3)
plot(tabmedia,col=2)
points(tabruotate[,,5],col=3)
plot(tabmedia,col=2)
points(tabruotate[,,6],col=3)
plot(tabmedia,col=2)
points(tabruotate[,,7],col=3)
plot(tabmedia,col=2)
points(tabruotate[,,8],col=3)
plot(tabmedia,col=2)
points(tabruotate[,,9],col=3)
plot(tabmedia,col=2)
points(tabruotate[,,10],col=3)
hist(datimedia,nclass=50,freq=FALSE)
curve(pnorm(x,mean(datimedia),sd(datimedia)),col=2,add=TRUE)
hist(tabmedia,nclass=50,freq=FALSE)
curve(pnorm(x,mean(datimedia),sd(datimedia)),col=2,add=TRUE)
curve(pnorm(x,mean(tabmedia),sd(tabmedia)),col=2,add=TRUE)
hist(tabruotate[,,1],nclass=50,freq=FALSE)
hist(tabruotate[,,1],nclass=50)
ks.test(tabruotate[,,1],dnorm)
hist(tabruotate[,,1],nclass=50,freq = FALSE)
curve(dnorm(x,mean(tabmedia),sd(tabmedia)),col=2,add=TRUE)
ks.test(tabruotate[,,1],dnorm)
library(GPA)
library(GPA)
library(GPA)
library(GPA)
library(GPA)
library(GPA)
library(GPA)
library(GPA)
